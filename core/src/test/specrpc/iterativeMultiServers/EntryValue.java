/* 
 * Copyright 2017 SpecRPC authors                                                                           
 *                                                                                                                       
 * Licensed under the Apache License, Version 2.0 (the "License");                                                      
 * you may not use this file except in compliance with the License.                                                     
 * You may obtain a copy of the License at                                                                              
 *                                                                                                                      
 *     http://www.apache.org/licenses/LICENSE-2.0                                                                       
 *                                                                                                                      
 * Unless required by applicable law or agreed to in writing, software                                                  
 * distributed under the License is distributed on an "AS IS" BASIS,                                                    
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                             
 * See the License for the specific language governing permissions and                                                  
 * limitations under the License. 
 */

package specrpc.iterativeMultiServers;

import java.util.concurrent.atomic.AtomicBoolean;

public class EntryValue {

  public static final long INVALID_INIT_TIMESTAMP = -1;// used when acquired but voting failed situation

  private String value;
  // An entry's time stamp (generated by the first server) is not the stamp of
  // writing the entry.
  private long timeStamp;
  public AtomicBoolean writeLock;// false=no lock; true=locked for writing

  public EntryValue(String value) {
    this.value = value;
    this.timeStamp = EntryValue.INVALID_INIT_TIMESTAMP;// new Date().getTime();
    this.writeLock = new AtomicBoolean();// default false
  }

  public EntryValue(String value, long timestamp, boolean lock) {
    this.value = value;
    this.timeStamp = timestamp;
    this.writeLock = new AtomicBoolean(lock);
  }

  public synchronized void lock() {
    this.writeLock.set(true);
  }

  public synchronized boolean isLock() {
    return this.writeLock.get();
  }

  public synchronized void unLock() {
    this.writeLock.set(false);
  }

  public synchronized void setValue(String value) {
    this.value = value;
  }

  public synchronized String getValue() {
    return this.value;
  }

  public synchronized void setTimestamp(long timestamp) {
    this.timeStamp = timestamp;
  }

  public synchronized long getTimestamp() {
    return this.timeStamp;
  }

  public synchronized String toString() {
    return this.value + " " + this.timeStamp + " " + this.writeLock.get();
  }
}
